#ifndef _MD_OLED_H_
  #define _MD_OLED_H_

  #include <Arduino.h>
  #include "config.h"
  #include "md_util.h"

  #ifdef USE_OLED
    #include <U8g2lib.h>
    //#include <Draht.h>

    // --- declarations
      const char COPYRIGHT_SYMBOL[] = {0xa9, '\0'};

    // --- test bitmap
      #ifdef RUN_OLED_TEST
        #define image_width 128
        #define image_height 21
        static const unsigned char image_bits[] U8X8_PROGMEM =
          {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x1f, 0x00, 0x00,
            0xfc, 0x1f, 0x00, 0x00, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xfe, 0x1f, 0x00, 0x00, 0xfc, 0x7f, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x07, 0x18, 0x00, 0x00, 0x0c, 0x60, 0x00, 0x00,
            0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x18, 0x00, 0x00,
            0x0c, 0xc0, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x03, 0x18, 0x00, 0x00, 0x0c, 0xc0, 0xf0, 0x1f, 0x06, 0x63, 0x80, 0xf1,
            0x1f, 0xfc, 0x33, 0xc0, 0x03, 0x18, 0x00, 0x00, 0x0c, 0xc0, 0xf8, 0x3f,
            0x06, 0x63, 0xc0, 0xf9, 0x3f, 0xfe, 0x33, 0xc0, 0x03, 0x18, 0x00, 0x00,
            0x0c, 0xc0, 0x18, 0x30, 0x06, 0x63, 0xc0, 0x18, 0x30, 0x06, 0x30, 0xc0,
            0xff, 0xff, 0xdf, 0xff, 0x0c, 0xc0, 0x18, 0x30, 0x06, 0x63, 0xe0, 0x18,
            0x30, 0x06, 0x30, 0xc0, 0xff, 0xff, 0xdf, 0xff, 0x0c, 0xc0, 0x98, 0x3f,
            0x06, 0x63, 0x60, 0x98, 0x3f, 0x06, 0x30, 0xc0, 0x03, 0x18, 0x0c, 0x00,
            0x0c, 0xc0, 0x98, 0x1f, 0x06, 0x63, 0x70, 0x98, 0x1f, 0x06, 0x30, 0xc0,
            0x03, 0x18, 0x06, 0x00, 0x0c, 0xc0, 0x18, 0x00, 0x06, 0x63, 0x38, 0x18,
            0x00, 0x06, 0x30, 0xc0, 0x03, 0x18, 0x03, 0x00, 0x0c, 0xe0, 0x18, 0x00,
            0x06, 0x63, 0x1c, 0x18, 0x00, 0x06, 0x30, 0xc0, 0x00, 0x80, 0x01, 0x00,
            0xfc, 0x7f, 0xf8, 0x07, 0x1e, 0xe3, 0x0f, 0xf8, 0x07, 0x06, 0xf0, 0xcf,
            0x00, 0xc0, 0x00, 0x00, 0xfc, 0x3f, 0xf0, 0x07, 0x1c, 0xe3, 0x07, 0xf0,
            0x07, 0x06, 0xe0, 0xcf, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x30, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
            0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0xe0, 0x00, 0xfc, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0xfc, 0x1f, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f
          };
      #endif // RUN_OLED_TEST

    class md_oled
    {
      protected:
        msTimer _clrT     = msTimer();
        msTimer _minT     = msTimer(STAT_TIMEMIN);
        bool    _isStatus = false; // status text visible
        char    _outTxt[STAT_LINELEN + 1] = "";
        uint8_t _wfont    = 5;
        uint8_t _hfont    = 8;

      public:
        md_oled();
        void begin();
        void drawStr    (u8g2_uint_t x, u8g2_uint_t y, const char *s);
        void drawFrame  (u8g2_uint_t x, u8g2_uint_t w,u8g2_uint_t h, u8g2_uint_t y);
        void drawRFrame (u8g2_uint_t x, u8g2_uint_t w,u8g2_uint_t h, u8g2_uint_t y, u8g2_uint_t r);
        void drawBox    (u8g2_uint_t x, u8g2_uint_t w,u8g2_uint_t h, u8g2_uint_t y);
        void drawRBox   (u8g2_uint_t x, u8g2_uint_t w,u8g2_uint_t h, u8g2_uint_t y, u8g2_uint_t r);
        void drawDisc   (u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad);
        void drawArcDisc(u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, u8g2_uint_t part); // quarter Disc z.B. U8G2_DRAW_UPPER_RIGHT
        void drawCircle (u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad);
        void drawArcCirc(u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, u8g2_uint_t part); // quarter Disc z.B. U8G2_DRAW_UPPER_RIGHT
        void drawLine   (u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2);
        void drawTriang (u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2, u8g2_uint_t x3, u8g2_uint_t y3);
        void drawBitmap (u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap);
        bool wrText     (const char *msg, uint8_t spalte, uint8_t zeile ); // write to text area
        bool wrStatus   ();
        bool wrStatus   (const char* msg);
        bool wrStatus   (const char* msg, uint32_t stayTime);
        #ifdef RUN_OLED_TEST
          void box_frame();
          void r_frame_box();
          void disc_circle();
          void string_orientation();
          void line();
          void triangle();
          void bitmap();
        #endif

      protected:
        void clearBuffer();
        void sendBuffer ();
        void prepare    ();

    };

    extern md_oled oled;

  #endif // USE_OLED
#endif // _MD_OLED_H_